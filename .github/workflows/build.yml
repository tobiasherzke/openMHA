name: build
on:
  push:
    branches: [main, master, development]

jobs:
#  documentation:
#    runs-on: ubuntu-18.04
#    steps:
#      - name: Check out repository
#        uses: actions/checkout@v2
#      - name: Install prerequisites
#        run: |
#           sudo dpkg -i .github/workflows/*.deb
#           sudo apt-get -y update
#           sudo apt-get -y install g++ make libsndfile1-dev libjack-jackd2-dev \
#           jackd2 portaudio19-dev liblo-dev libeigen3-dev doxygen xfig liblsl  \
#           graphviz texlive texlive-latex-extra texlive-font-utils
#      - name: Build documentation
#        run: make -j doc
#      - name: publish PDFs
#        uses: actions/upload-artifact@v2
#        with:
#          name: docs
#          path: "*.pdf"

  openMHA:
#    needs: documentation
    strategy:
      fail-fast: false
      matrix:
        config:
        - {runner: "ubuntu-20.04"  , cpu: "x86_64" , docker: ""}
        - {runner: "ubuntu-18.04"  , cpu: "x86_64" , docker: ""}
#        - {runner: "ubuntu-18.04"  , cpu: "armv7"  , docker: ".github/workflows/DOCKER"}
#        - {runner: "ubuntu-18.04"  , cpu: "aarch64", docker: ".github/workflows/DOCKER"}
        - {runner: "ubuntu-16.04"  , cpu: "x86_64" , docker: ""}
        - {runner: "windows-latest", cpu: "x86_64" , docker: ""}
        - {runner: "macOS-latest"  , cpu: "x86_64" , docker: ""}
    runs-on: ${{matrix.config.runner}}
    env:
      D: ${{matrix.config.docker}}
      CPU: ${{matrix.config.cpu}}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - if: ${{ matrix.config.runner == 'windows-latest' }}
        uses: msys2/setup-msys2@v2
        with:
          release: false
          install: >-
               msys/git
               mingw64/mingw-w64-x86_64-gcc
               msys/make
               tar
               mingw64/mingw-w64-x86_64-boost
               openbsd-netcat
               mingw-w64-x86_64-libsndfile
               mingw-w64-x86_64-portaudio
               mingw64/mingw-w64-x86_64-nsis
               mingw-w64-x86_64-eigen3
      - run: sudo ln -s /bin/bash /usr/local/bin/msys2
        shell: bash
        if: ${{ matrix.config.runner != 'windows-latest' }}
      - name: uninstall autoconf from msys
        if: ${{ matrix.config.runner == 'windows-latest' }}
        run: pacman -Ss automake && pacman --noconfirm -R autoconf autogen automake-wrapper automake-1.6 automake-1.7 automake-1.8 automake-1.9 automake-1.10 automake-1.11 automake-1.12 automake-1.13 automake-1.14 automake-1.15 automake1.16
      # Install qemu support for ARM CPUs and test execution in ARM container.
      - name: Prepare to run commands in docker container for ARM CPU
        if: ${{ matrix.config.cpu == 'armv7' || matrix.config.cpu == 'aarch64' }}
        run: |
           uname -a
           systemctl status binfmt-support || true
           sudo apt-get -y update
           sudo apt-get -y install qemu-user-static
           git clone https://github.com/computermouth/qemu-static-conf.git
           sudo mkdir -p /lib/binfmt.d
           sudo cp qemu-static-conf/*.conf /lib/binfmt.d/
           rm -rf qemu-static-conf
           sudo systemctl restart systemd-binfmt.service
           systemctl status binfmt-support
      - name: check
        run: $D uname -a
      - name: Install Linux prerequisites
        run: |
           sudo apt-get -y update
           sudo apt-get -y install g++ make libsndfile1-dev libjack-jackd2-dev \
           jackd2 portaudio19-dev liblo-dev libeigen3-dev libboost-dev
        shell: bash
        if: ${{runner.os == 'Linux' && matrix.config.docker == ''}}
      - name: Install liblsl
        run: |
           sudo dpkg -i .github/workflows/*.deb
           sudo apt-get -y update
           sudo apt-get -y install liblsl
        shell: bash
        if: ${{runner.os == 'Linux' && matrix.config.docker == '' && matrix.config.runner != 'ubuntu-16.04'}}
      - name: Install macOS prerequisites
        run: |
          brew install portaudio jack boost octave openjdk liblo eigen pkg-config libsndfile
          octave --eval 'pkg install -forge control;quit'
          octave --eval 'pkg install -forge signal;quit'
        shell: bash
        if: ${{runner.os == 'macOS'}}
      - name: build
        run: $D make test unit-tests install
